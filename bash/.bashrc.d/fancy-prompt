# Colors
COLOR_NEUTRAL="\[\e[48;5;237m\]"
COLOR_RESET="\[\e[0m\]"
COLOR_1="\[\e[48;5;196m\]"
COLOR_2="\[\e[48;5;202m\]"
COLOR_3="\[\e[48;5;197m\]"
COLOR_4="\[\e[48;5;199m\]"
COLOR_5_1="\[\e[48;5;235m\]"
COLOR_5_2="\[\e[48;5;239m\]"
COLOR_6="\[\e[48;5;245m\]"
COLOR_FG_BLACK="\[\e[38;5;232m\]"

# Fancy prompt.
prompt_cmd () {
    PSL="${COLOR_1}${COLOR_FG_BLACK}  BASH  ${COLOR_RESET}"
    PSL+="${COLOR_2}${COLOR_FG_BLACK} \u ${COLOR_RESET}"
    PSL+="${COLOR_3}${COLOR_FG_BLACK} @\h ${COLOR_RESET}"
    PSL+="${COLOR_4}${COLOR_FG_BLACK} \w ${COLOR_RESET}"

    local branch
    if branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null); then
        PSL+="${COLOR_5_1} BRANCH ${COLOR_RESET}"
        PSL+="${COLOR_5_2} $(git branch | grep "*" | cut -d" " -f2) ${COLOR_RESET}"
    fi

    if ! [[ -z "$VIRTUAL_ENV" ]]; then
        PSL+="${COLOR_5_1} VENV ${COLOR_RESET}"
        PSL+="${COLOR_5_2} $(realpath --relative-to=$PWD $VIRTUAL_ENV) ${COLOR_RESET}"
    fi

    PSL+="${COLOR_5_1}  - ${COLOR_RESET}"

    if [[ -f "Dockerfile" ]]; then
        PSL+="${COLOR_5_1} [DOCKER] ${COLOR_RESET}"
    elif [[ -f "docker-compose.yml" ]]; then
        PSL+="${COLOR_5_1} [DOCKER] ${COLOR_RESET}"
    fi

    if [[ -f "requirements.txt" ]]; then
        PSL+="${COLOR_5_1} [PYTHON] ${COLOR_RESET}"
    elif [[ -f "setup.py" ]]; then
        PSL+="${COLOR_5_1} [PYTHON] ${COLOR_RESET}"
    elif [[ -f "manage.py" ]]; then
        PSL+="${COLOR_5_1} [PYTHON] ${COLOR_RESET}"
    elif [[ -f "Pipfile" ]]; then
        PSL+="${COLOR_5_1} [PYTHON] ${COLOR_RESET}"
    elif [[ -f "venv" ]]; then
        PSL+="${COLOR_5_1} [PYTHON] ${COLOR_RESET}"
    elif [[ -f ".venv" ]]; then
        PSL+="${COLOR_5_1} [PYTHON] ${COLOR_RESET}"
    elif [[ -f "pyproject.toml" ]]; then
        PSL+="${COLOR_5_1} [PYTHON] ${COLOR_RESET}"
    elif [[ -f "poetry.lock" ]]; then
        PSL+="${COLOR_5_1} [PYTHON] ${COLOR_RESET}"
    fi

    # if [[ -d "venv" ]] && [[ -z "$VIRTUAL_ENV" ]]; then
    #     PSL+="${COLOR_5_1} [VENV] ${COLOR_RESET}"
    # fi

    # if [[ -f "Gemfile" ]]; then
    #     PSL+="${COLOR_5_1} GEMFILE ${COLOR_RESET}"
    # fi

    # if [[ -f "Pipfile" ]]; then
    #     PSL+="${COLOR_5_1} PIPFILE ${COLOR_RESET}"
    # fi

    if [[ -f "package.json" ]]; then
        PSL+="${COLOR_5_1} [NODE] ${COLOR_RESET}"
    fi

    if [[ -f "go.mod" ]]; then
        PSL+="${COLOR_5_1} [GO] ${COLOR_RESET}"
    elif [[ -f "go.sum" ]]; then
        PSL+="${COLOR_5_1} [GO] ${COLOR_RESET}"
    fi

    if [[ -f "Makefile" ]]; then
        PSL+="${COLOR_5_1} [MAKE] ${COLOR_RESET}"
    fi

    if branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null); then
        # Ignore untracked files since it causes a slowdown on large repositories.
        local status=$(git status --porcelain --untracked-files=no 2> /dev/null)
        if [[ "$status" != "" ]]; then
            PSL+="${COLOR_5_1} [DIRTY] ${COLOR_RESET}"
        fi
    fi

    PSL+="%${COLUMNS}s\n${COLOR_5_1} [DIRTY] ${COLOR_RESET}"
    PS1="${PSL}\nâ–¶ "
}
export PROMPT_COMMAND='prompt_cmd'

# After each command, append to the history file and reread it
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"
